{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ApolloServer } from 'apollo-server-micro';\nimport schema from '../../apollo/schema';\nconst apolloServer = new ApolloServer(_objectSpread({}, schema));\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default apolloServer.createHandler({\n  path: '/api/graphql'\n});","map":{"version":3,"sources":["/Users/marioncasters/Sites/GIT/portfolio-next/pages/api/graphql.js"],"names":["ApolloServer","schema","apolloServer","config","api","bodyParser","createHandler","path"],"mappings":";;;;;;AAAA,SAASA,YAAT,QAA6B,qBAA7B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAEA,MAAMC,YAAY,GAAG,IAAIF,YAAJ,mBAAsBC,MAAtB,EAArB;AAEA,OAAO,MAAME,MAAM,GAAG;AAClBC,EAAAA,GAAG,EAAE;AACDC,IAAAA,UAAU,EAAE;AADX;AADa,CAAf;AAMP,eAAeH,YAAY,CAACI,aAAb,CAA2B;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAA3B,CAAf","sourcesContent":["import { ApolloServer } from 'apollo-server-micro'\nimport schema from '../../apollo/schema'\n\nconst apolloServer = new ApolloServer({ ...schema });\n\nexport const config = {\n    api: {\n        bodyParser: false,\n    },\n}\n\nexport default apolloServer.createHandler({ path: '/api/graphql' })"]},"metadata":{},"sourceType":"module"}