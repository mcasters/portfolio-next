{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/marioncasters/Sites/GIT/portfolio-next/apollo/client.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nvar globalApolloClient = null;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApollo(PageComponent) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    var displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = function _callee(ctx) {\n      var AppTree, apolloClient, pageProps, _ref3, getDataFromTree, apolloState;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              AppTree = ctx.AppTree; // Initialize ApolloClient, add it to the ctx object so\n              // we can use it in `PageComponent.getInitialProp`.\n\n              apolloClient = ctx.apolloClient = initApolloClient(); // Run wrapped getInitialProps methods\n\n              pageProps = {};\n\n              if (!PageComponent.getInitialProps) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(PageComponent.getInitialProps(ctx));\n\n            case 6:\n              pageProps = _context.sent;\n\n            case 7:\n              if (!false) {\n                _context.next = 24;\n                break;\n              }\n\n              if (!(ctx.res && ctx.res.finished)) {\n                _context.next = 10;\n                break;\n              }\n\n              return _context.abrupt(\"return\", pageProps);\n\n            case 10:\n              if (!ssr) {\n                _context.next = 24;\n                break;\n              }\n\n              _context.prev = 11;\n              _context.next = 14;\n              return _regeneratorRuntime.awrap(import('@apollo/react-ssr'));\n\n            case 14:\n              _ref3 = _context.sent;\n              getDataFromTree = _ref3.getDataFromTree;\n              _context.next = 18;\n              return _regeneratorRuntime.awrap(getDataFromTree(__jsx(AppTree, {\n                pageProps: _objectSpread({}, pageProps, {\n                  apolloClient: apolloClient\n                }),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 67\n                },\n                __self: this\n              })));\n\n            case 18:\n              _context.next = 23;\n              break;\n\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](11);\n              // Prevent Apollo Client GraphQL errors from crashing SSR.\n              // Handle them in components via the data.error prop:\n              // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n              console.error('Error while running `getDataFromTree`', _context.t0);\n\n            case 23:\n              // getDataFromTree does not call componentWillUnmount\n              // head side effect therefore need to be cleared manually\n              Head.rewind();\n\n            case 24:\n              // Extract query data from the Apollo store\n              apolloState = apolloClient.cache.extract();\n              return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                apolloState: apolloState\n              }));\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[11, 20]]);\n    };\n  }\n\n  return WithApollo;\n}\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState);\n  }\n\n  return globalApolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var ssrMode = false;\n  var cache = new InMemoryCache().restore(initialState); // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  return new ApolloClient({\n    ssrMode: ssrMode,\n    link: createIsomorphLink(),\n    cache: cache\n  });\n}\n\nfunction createIsomorphLink() {\n  if (false) {\n    var _require = require('apollo-link-schema'),\n        SchemaLink = _require.SchemaLink;\n\n    var _require2 = require('./schema'),\n        schema = _require2.schema;\n\n    return new SchemaLink({\n      schema: schema\n    });\n  } else {\n    var _require3 = require('apollo-link-http'),\n        HttpLink = _require3.HttpLink;\n\n    return new HttpLink({\n      uri: '/api/graphql',\n      credentials: 'same-origin'\n    });\n  }\n}","map":{"version":3,"sources":["/Users/marioncasters/Sites/GIT/portfolio-next/apollo/client.js"],"names":["React","Head","ApolloProvider","ApolloClient","InMemoryCache","globalApolloClient","withApollo","PageComponent","ssr","WithApollo","apolloClient","apolloState","pageProps","client","initApolloClient","displayName","name","console","warn","getInitialProps","ctx","AppTree","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","ssrMode","restore","link","createIsomorphLink","require","SchemaLink","schema","HttpLink","uri","credentials"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Head from 'next/head'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\n\nlet globalApolloClient = null\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, { ssr = true } = {}) {\n    const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n        const client = apolloClient || initApolloClient(apolloState)\n        return (\n            <ApolloProvider client={client}>\n                <PageComponent {...pageProps} />\n            </ApolloProvider>\n        )\n    }\n\n    // Set the correct displayName in development\n    if (process.env.NODE_ENV !== 'production') {\n        const displayName =\n            PageComponent.displayName || PageComponent.name || 'Component'\n\n        if (displayName === 'App') {\n            console.warn('This withApollo HOC only works with PageComponents.')\n        }\n\n        WithApollo.displayName = `withApollo(${displayName})`\n    }\n\n    if (ssr || PageComponent.getInitialProps) {\n        WithApollo.getInitialProps = async ctx => {\n            const { AppTree } = ctx\n\n            // Initialize ApolloClient, add it to the ctx object so\n            // we can use it in `PageComponent.getInitialProp`.\n            const apolloClient = (ctx.apolloClient = initApolloClient())\n\n            // Run wrapped getInitialProps methods\n            let pageProps = {}\n            if (PageComponent.getInitialProps) {\n                pageProps = await PageComponent.getInitialProps(ctx)\n            }\n\n            // Only on the server:\n            if (typeof window === 'undefined') {\n                // When redirecting, the response is finished.\n                // No point in continuing to render\n                if (ctx.res && ctx.res.finished) {\n                    return pageProps\n                }\n\n                // Only if ssr is enabled\n                if (ssr) {\n                    try {\n                        // Run all GraphQL queries\n                        const { getDataFromTree } = await import('@apollo/react-ssr')\n                        await getDataFromTree(\n                            <AppTree\n                                pageProps={{\n                                    ...pageProps,\n                                    apolloClient,\n                                }}\n                            />\n                        )\n                    } catch (error) {\n                        // Prevent Apollo Client GraphQL errors from crashing SSR.\n                        // Handle them in components via the data.error prop:\n                        // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                        console.error('Error while running `getDataFromTree`', error)\n                    }\n\n                    // getDataFromTree does not call componentWillUnmount\n                    // head side effect therefore need to be cleared manually\n                    Head.rewind()\n                }\n            }\n\n            // Extract query data from the Apollo store\n            const apolloState = apolloClient.cache.extract()\n\n            return {\n                ...pageProps,\n                apolloState,\n            }\n        }\n    }\n\n    return WithApollo\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient(initialState) {\n    // Make sure to create a new client for every server-side request so that data\n    // isn't shared between connections (which would be bad)\n    if (typeof window === 'undefined') {\n        return createApolloClient(initialState)\n    }\n\n    // Reuse client on the client-side\n    if (!globalApolloClient) {\n        globalApolloClient = createApolloClient(initialState)\n    }\n\n    return globalApolloClient\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient(initialState = {}) {\n    const ssrMode = typeof window === 'undefined'\n    const cache = new InMemoryCache().restore(initialState)\n\n    // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n    return new ApolloClient({\n        ssrMode,\n        link: createIsomorphLink(),\n        cache,\n    })\n}\n\nfunction createIsomorphLink() {\n    if (typeof window === 'undefined') {\n        const { SchemaLink } = require('apollo-link-schema')\n        const { schema } = require('./schema')\n        return new SchemaLink({ schema })\n    } else {\n        const { HttpLink } = require('apollo-link-http')\n        return new HttpLink({\n            uri: '/api/graphql',\n            credentials: 'same-origin',\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}