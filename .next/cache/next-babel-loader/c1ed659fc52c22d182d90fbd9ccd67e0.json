{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { makeExecutableSchema } from 'graphql-tools';\nimport { typeDefs } from './type-defs';\nimport { resolvers } from './resolvers';\nexport const schema = _objectSpread({\n  typeDefs,\n  resolvers\n}, __DEV__ ? {\n  log: e => console.error(e.stack)\n} : {});","map":{"version":3,"sources":["/Users/marioncasters/Sites/GIT/portfolio-next/apollo/schema.js"],"names":["makeExecutableSchema","typeDefs","resolvers","schema","__DEV__","log","e","console","error","stack"],"mappings":";;;;;;AAAA,SAASA,oBAAT,QAAqC,eAArC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAO,MAAMC,MAAM;AACfF,EAAAA,QADe;AAEfC,EAAAA;AAFe,GAGXE,OAAO,GAAG;AAAEC,EAAAA,GAAG,EAAEC,CAAC,IAAIC,OAAO,CAACC,KAAR,CAAcF,CAAC,CAACG,KAAhB;AAAZ,CAAH,GAA0C,EAHtC,CAAZ","sourcesContent":["import { makeExecutableSchema } from 'graphql-tools'\nimport { typeDefs } from './type-defs'\nimport { resolvers } from './resolvers'\n\nexport const schema = {\n    typeDefs,\n    resolvers,\n    ...(__DEV__ ? { log: e => console.error(e.stack) } : {}),\n};"]},"metadata":{},"sourceType":"module"}